1.1 package.json:
-----------------------


{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.1",
    "pg": "^8.11.0",
    "reflect-metadata": "^0.1.13",
    "typeorm": "^0.3.17"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}

1.2 index.js:
--------------------

require("dotenv").config();
require("reflect-metadata");
const express = require("express");
const cors = require("cors");
const { AppDataSource } = require("./data-source");
const authRoutes = require("./routes/auth");
const softwareRoutes = require("./routes/software");
const requestRoutes = require("./routes/request");

const app = express();
app.use(cors());
app.use(express.json());

AppDataSource.initialize()
  .then(() => {
    console.log("📦 Database connected");
    app.listen(5000, () => console.log("🚀 Server running on port 5000"));
  })
  .catch((err) => console.error("❌ DB Connection Error:", err));

app.use("/api/auth", authRoutes);
app.use("/api/software", softwareRoutes);
app.use("/api/requests", requestRoutes);

1.3 data-source.js:
-------------------------

const { DataSource } = require("typeorm");
const User = require("./entities/User");
const Software = require("./entities/Software");
const Request = require("./entities/Request");

exports.AppDataSource = new DataSource({
  type: "postgres",
  host: "localhost",
  port: 5432,
  username: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
  synchronize: true,
  logging: false,
  entities: [User, Software, Request],
});

1.4 .env:
------------

JWT_SECRET=mysecretkey
DB_USER=postgres
DB_PASS=your_password
DB_NAME=access_mgmt

1.5 entities/User.js:
------------------------

const { EntitySchema } = require("typeorm");

module.exports = new EntitySchema({
  name: "User",
  tableName: "users",
  columns: {
    id: { primary: true, type: "int", generated: true },
    username: { type: "varchar", unique: true },
    password: { type: "varchar" },
    role: { type: "varchar" }
  }
});

1.6 entities/Software.js:
--------------------------------

const { EntitySchema } = require("typeorm");

module.exports = new EntitySchema({
  name: "Software",
  tableName: "software",
  columns: {
    id: { primary: true, type: "int", generated: true },
    name: { type: "varchar" },
    description: { type: "text" },
    accessLevels: { type: "simple-array" }
  }
});

1.7 entities/Request.js:
-----------------------------

const { EntitySchema } = require("typeorm");

module.exports = new EntitySchema({
  name: "Request",
  tableName: "requests",
  columns: {
    id: { primary: true, type: "int", generated: true },
    accessType: { type: "varchar" },
    reason: { type: "text" },
    status: { type: "varchar", default: "Pending" }
  },
  relations: {
    user: {
      type: "many-to-one",
      target: "User",
      joinColumn: true
    },
    software: {
      type: "many-to-one",
      target: "Software",
      joinColumn: true
    }
  }
});

1.8 routes:
-------------------------------
auth.js:
-----------

const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { AppDataSource } = require("../data-source");
const User = require("../entities/User");

const router = express.Router();
const userRepo = AppDataSource.getRepository("User");

router.post("/signup", async (req, res) => {
  const { username, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = userRepo.create({ username, password: hashedPassword, role: "Employee" });
    await userRepo.save(user);
    res.status(201).json({ message: "User registered successfully" });
  } catch (err) {
    res.status(500).json({ message: "Signup failed", error: err.message });
  }
});

router.post("/login", async (req, res) => {
  const { username, password } = req.body;
  try {
    const user = await userRepo.findOneBy({ username });
    if (!user) return res.status(404).json({ message: "User not found" });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(401).json({ message: "Incorrect password" });

    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "1h" });
    res.json({ token, role: user.role });
  } catch (err) {
    res.status(500).json({ message: "Login failed", error: err.message });
  }
});

module.exports = router;

 software.js:
-------------
const express = require("express");
const { AppDataSource } = require("../data-source");
const Software = require("../entities/Software");
const { verifyToken, isAdmin } = require("../middleware/auth");

const router = express.Router();
const softwareRepo = AppDataSource.getRepository("Software");

router.post("/", verifyToken, isAdmin, async (req, res) => {
  const { name, description, accessLevels } = req.body;
  try {
    const software = softwareRepo.create({ name, description, accessLevels });
    await softwareRepo.save(software);
    res.status(201).json({ message: "Software created" });
  } catch (err) {
    res.status(500).json({ message: "Failed to create software", error: err.message });
  }
});

module.exports = router;


request.js:
----------------
const jwt = require("jsonwebtoken");

exports.verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.sendStatus(401);
  const token = authHeader.split(" ")[1];
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

exports.isAdmin = (req, res, next) => {
  if (req.user.role !== "Admin") return res.sendStatus(403);
  next();
};

exports.isManager = (req, res, next) => {
  if (req.user.role !== "Manager") return res.sendStatus(403);
  next();
};



And middleware/auth.js (JWT check middleware):
----------------------------------------------------
const jwt = require("jsonwebtoken");

exports.verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.sendStatus(401);
  const token = authHeader.split(" ")[1];
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
};

exports.isAdmin = (req, res, next) => {
  if (req.user.role !== "Admin") return res.sendStatus(403);
  next();
};

exports.isManager = (req, res, next) => {
  if (req.user.role !== "Manager") return res.sendStatus(403);
  next();
};
